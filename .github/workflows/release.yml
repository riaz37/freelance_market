name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  # Job 1: Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          # Set output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  # Job 2: Build and Push Release Images
  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/server:latest
            ${{ env.REGISTRY }}/${{ github.repository }}/server:${{ steps.version.outputs.version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/web:latest
            ${{ env.REGISTRY }}/${{ github.repository }}/web:${{ steps.version.outputs.version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Update Docker Compose for Release
  update-docker-compose:
    name: Update Docker Compose
    runs-on: ubuntu-latest
    needs: [build-release-images]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create release docker-compose
        run: |
          # Create a release-specific docker-compose file
          cp docker-compose.yml docker-compose.release.yml
          
          # Update image tags to use the release version
          sed -i "s|build:|# build:|g" docker-compose.release.yml
          sed -i "s|context: \.|# context: \.|g" docker-compose.release.yml
          sed -i "s|dockerfile: apps/server/Dockerfile|# dockerfile: apps/server/Dockerfile|g" docker-compose.release.yml
          sed -i "s|dockerfile: apps/web/Dockerfile|# dockerfile: apps/web/Dockerfile|g" docker-compose.release.yml
          
          # Add image references
          sed -i "/# build:/a\\    image: ${{ env.REGISTRY }}/${{ github.repository }}/server:${{ steps.version.outputs.version }}" docker-compose.release.yml
          sed -i "/# dockerfile: apps\/web\/Dockerfile/a\\    image: ${{ env.REGISTRY }}/${{ github.repository }}/web:${{ steps.version.outputs.version }}" docker-compose.release.yml

      - name: Commit release files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docker-compose.release.yml
          git commit -m "Add release docker-compose for ${{ github.ref_name }}" || exit 0
          git push
