name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize]
  pull_request_target:
    types: [opened, edited, synchronize]

jobs:
  # Job 1: Auto-label PRs
  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label based on files changed
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml

      - name: Label based on PR size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: 10
          s_label: 'size/s'
          s_max_size: 100
          m_label: 'size/m'
          m_max_size: 500
          l_label: 'size/l'
          l_max_size: 1000
          xl_label: 'size/xl'

  # Job 2: Check PR title and description
  pr-check:
    name: PR Title & Description Check
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            ci
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR has description
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            if (!pr.body || pr.body.trim().length < 10) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '⚠️ This PR appears to be missing a description. Please add a description explaining what changes were made and why.'
              });
              
              core.setFailed('PR description is required and should be at least 10 characters long.');
            }

  # Job 3: Welcome new contributors
  welcome:
    name: Welcome New Contributors
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    permissions:
      pull-requests: write

    steps:
      - name: Welcome first-time contributors
        uses: actions/first-interaction@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pr-message: |
            👋 Welcome to the Freelance Marketplace project! Thank you for your contribution.
            
            A few things to note:
            - Make sure your PR has a clear description
            - All checks must pass before merging
            - A maintainer will review your changes soon
            
            If you have any questions, feel free to ask in the comments!

  # Job 4: Auto-assign reviewers
  assign-reviewers:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    permissions:
      pull-requests: write

    steps:
      - name: Auto assign reviewers
        uses: actions/github-script@v6
        with:
          script: |
            const reviewers = ['maintainer1', 'maintainer2']; // Replace with actual usernames
            const author = context.payload.pull_request.user.login;
            
            // Don't assign the author as a reviewer
            const availableReviewers = reviewers.filter(reviewer => reviewer !== author);
            
            if (availableReviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: availableReviewers.slice(0, 2) // Assign up to 2 reviewers
              });
            }
